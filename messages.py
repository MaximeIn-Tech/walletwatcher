######## MENU MESSAGES ###########
async def main_menu_message(username, user_language):
    if user_language == "fr":
        return f"""üöÄ Bienvenue sur Crypto Wallet Monitor {username}, con√ßu avec soin par @TechSherpa !

Pr√™t √† rester inform√© en temps r√©el d√®s que des transactions se produisent dans vos portefeuilles de cryptomonnaie ? Commen√ßons !

Avec ce bot intuitif, vous pouvez choisir manuellement vos portefeuilles sur diff√©rentes blockchains, d√©finir vos pr√©f√©rences et rester inform√© des mises √† jour pr√©cis√©ment quand vous le souhaitez.

Explorez notre ensemble de commandes :
"""
    elif user_language == "es":
        return f"""üöÄ ¬°Bienvenido a Crypto Wallet Monitor {username}, elaborado con cuidado por @TechSherpa!

¬øListo para mantenerte informado con alertas en tiempo real cada vez que ocurran transacciones en tus carteras de criptomonedas? ¬°Comencemos!

Con este bot intuitivo, puedes elegir manualmente tus carteras de diferentes blockchains, configurar tus preferencias y mantenerte al tanto de las actualizaciones precisamente cuando lo desees.

¬°Explora nuestra suite de comandos!
        """
    else:
        # Default message for unsupported languages or English
        return f"""üöÄ Welcome to Crypto Wallet Monitor {username}, crafted with care by @TechSherpa!

Ready to stay in the loop with real-time alerts whenever transactions occur in your crypto wallets? Let's get started!

With this intuitive bot, you can handpick wallets from various blockchains, set your preferences, and stay in the loop with updates precisely when you desire.

Explore our suite of commands:
"""


async def help_message(user_language: str):
    if user_language == "fr":
        return """Le bot prend soin de vos demandes et stocke vos donn√©es en toute s√©curit√© dans une base de donn√©es.

Nous accordons une grande importance √† la protection de votre anonymat. Seul votre Chat_ID est conserv√©, ce qui garantit que les messages vous parviennent pr√©cis√©ment sans m√©langer les donn√©es des autres utilisateurs.

De plus, le bot n'enregistre pas votre adresse IP, votre nom d'utilisateur ou d'autres d√©tails qui pourraient vous identifier.
"""
    elif user_language == "es":
        return """El bot procesa atentamente tus consultas y almacena tus datos de forma segura en una base de datos.

Mantener el anonimato del usuario es primordial; por lo tanto, solo se retiene tu Chat_ID, garantizando la entrega precisa de mensajes sin mezclar datos de varios usuarios.

Adem√°s, el bot se abstiene de registrar tu IP, nombre de usuario u otros detalles que podr√≠an identificarte como usuario
"""
    else:
        # Default message for unsupported languages or English
        return """The bot attentively processes your inquiries and securely stores your data within a database. 
    
Maintaining user anonymity is paramount; hence, only your Chat_ID is retained, ensuring precise message delivery without intertwining data from various users. 
    
Additionally, the bot refrains from logging your IP, username, or any other details that could potentially identify you as a user.
"""


###### OPTIONS MESSAGES #####
async def settings_message(user_language: str):
    if user_language == "fr":
        return "Choisissez l'option que vous voulez modifier:"
    elif user_language == "es":
        return "Por favor, elige la configuraci√≥n que deseas ajustar:"
    else:
        return "Please choose a setting you want to adjust:"


async def language_selection_message(user_language: str):
    if user_language == "fr":
        return "Choisissez une langue:"
    elif user_language == "es":
        return "Por favor, elige el idioma que prefieres:"
    else:
        return "Please choose a language you prefer:"


####### ADD WALLET MESSAGES


async def blockchain_choice_message(user_language: str):
    if user_language == "fr":
        return "Choisissez une blockchain:"
    elif user_language == "es":
        return "Por favor, selecciona una blockchain:"
    else:
        return "Please select a blockchain:"


async def address_choice_message(user_language: str, selected_blockchain: str):
    if user_language == "fr":
        return f"Veuillez entrer une adresse de portefeuille {selected_blockchain} :"
    elif user_language == "es":
        return f"Por favor, ingresa una direcci√≥n de monedero {selected_blockchain}:"
    else:
        return f"Please enter any {selected_blockchain} wallet address:"


async def address_confirmation_message(user_language: str, wallet_address: str):
    if user_language == "fr":
        return f"Votre adresse de portefeuille est {wallet_address}.\nSouhaitez-vous donner un nom √† cette adresse ?"
    elif user_language == "es":
        return f"Tu direcci√≥n de monedero es {wallet_address}.\n¬øTe gustar√≠a darle un nombre a esta direcci√≥n?"
    else:
        return (
            f"Your wallet address is {wallet_address}.\nWould you like to name that address?",
        )


async def wallet_address_error(user_language: str):
    if user_language == "fr":
        return "Veuillez saisir une adresse de portefeuille valide"
    elif user_language == "es":
        return "Por favor, ingresa una direcci√≥n de monedero v√°lida."
    else:
        return "Please enter a valid wallet address."


async def naming_wallet(user_language: str):
    if user_language == "fr":
        return "Veuillez saisir le nom du portefeuille :"
    elif user_language == "es":
        return "Por favor, ingresa el nombre del monedero:"
    else:
        return "Please enter the name of the wallet:"


async def token_symbol_choice(user_language: str):
    if user_language == "fr":
        return "Veuillez choisir un token :"
    elif user_language == "es":
        return "Por favor, selecciona un s√≠mbolo de token:"
    else:
        return "Please select a token symbol:"


async def contract_address_selection(user_language: str):
    if user_language == "fr":
        return "Veuillez saisir l'adresse du contrat :"
    elif user_language == "es":
        return "Por favor, ingresa la direcci√≥n del contrato:"
    else:
        return "Please enter the contract address:"


async def custom_contract_address(user_language: str, contract_address: str):
    if user_language == "fr":
        return f"Adresse du contrat {contract_address} enregistr√©e."
    elif user_language == "es":
        return f"Direcci√≥n del contrato {contract_address} guardada."
    else:
        return f"Contract address {contract_address} saved."


async def contract_address_error(user_language: str):
    if user_language == "fr":
        return "Veuillez saisir une adresse de contrat valide :"
    elif user_language == "es":
        return "Por favor, ingresa una direcci√≥n de contrato v√°lida."
    else:
        return "Please enter a valid contract address."


async def trigger_point_selection(user_language: str):
    if user_language == "fr":
        return "Veuillez entrer le point de d√©clenchement <i>(choisissez 0 si vous voulez voir chaque mise √† jour)</i> :"
    elif user_language == "es":
        return "Por favor, ingresa el punto de activaci√≥n <i>(elige 0 si deseas ver cada actualizaci√≥n)</i>:"
    else:
        return "Please enter the trigger point <i>(choose 0 if you want to see every update)</i>:"


async def trigger_point_saved(user_language: str, trigger_point):
    if user_language == "fr":
        return f"Point de d√©clenchement {trigger_point} enregistr√©."
    elif user_language == "es":
        return f"Punto de activaci√≥n {trigger_point} guardado."
    else:
        return f"Trigger point {trigger_point} saved."


async def trigger_point_error(user_language: str):
    if user_language == "fr":
        return "Veuillez entrer un point de d√©clenchement valide."
    elif user_language == "es":
        return "Por favor, ingresa un punto de activaci√≥n v√°lido."
    else:
        return "Please enter a valid trigger point."


async def stake_message(user_language: str):
    if user_language == "fr":
        return "L'√©tat de vos stakes sont surveill√©s. Vous recevrez un message si ils sont en cours d'unstaking."
    elif user_language == "es":
        return "Los stakes en este monedero est√°n siendo vigilados. Ser√°s notificado si se retira alg√∫n stake."
    else:
        return "Stakes on this wallet are being watched. You'll be notified if a stake is withdrawn."


async def tracked_wallet_setup_message(
    wallet_name,
    blockchain,
    wallet_address,
    symbol,
    contract_address,
    trigger_point,
    language,
):
    if language == "fr":
        message = f"Configuration du portefeuille suivi :\n\n"
        message += f"Nom du portefeuille : {wallet_name}\n"
        message += f"Blockchain : {blockchain}\n"
        message += f"Adresse du portefeuille : {wallet_address}\n"
        message += f"Symbole du jeton : {symbol}\n"
        if contract_address is not None:
            message += f"Adresse du contrat : {contract_address}\n"
        message += f"Point de d√©clenchement : {trigger_point}"
    elif language == "es":
        message = f"Configuraci√≥n del monedero rastreado:\n\n"
        message += f"Nombre del monedero: {wallet_name}\n"
        message += f"Blockchain: {blockchain}\n"
        message += f"Direcci√≥n del monedero: {wallet_address}\n"
        message += f"S√≠mbolo del token: {symbol}\n"
        if contract_address is not None:
            message += f"Direcci√≥n del contrato: {contract_address}\n"
        message += f"Punto de activaci√≥n: {trigger_point}"
    else:  # English
        message = f"Tracked wallet setup:\n\n"
        message += f"Wallet Name: {wallet_name}\n"
        message += f"Blockchain: {blockchain}\n"
        message += f"Wallet Address: {wallet_address}\n"
        message += f"Token Symbol: {symbol}\n"
        if contract_address is not None:
            message += f"Contract Address: {contract_address}\n"
        message += f"Trigger Point: {trigger_point}"

    return message
